<script type="text/javascript">
// ie等不支持class定义，故通过字符串方式实例化function调用
(function (factory) {
    module.exports = function(util){
        const XElement = factory(util);
        return XElement;
    };
})(function (util) {
    function createElement(_HTMLElement){
        return class IElement extends _HTMLElement {
            constructor() {
                super();
            }

            bindModule() {
                if(this.component) return;
                const Component = this.$anestor;

                const component = this.component = typeof Component === 'function' ? new Component(this) : {};

                component.template = Component.template || '';
                component.$el = this;

                this.createdCallback();
            }

            emit(funcName, args, cb, isAsync) {
                this.bindModule();
                const component = this.component, func = component[funcName];
                if(!(cb||func)) return;
                var _func = function () {
                    cb && cb();
                    func && func.apply(component, args);
                };

                if(isAsync){
                    Promise.resolve().then(function(){
                        _func();
                    });
                }else{
                    _func();
                };
            }

            // 创建元素实例
            createdCallback(...args) {
                const _this = this;
                const template = _this.component.template, createdSync = _this.component.createdSync;
                const isAsync = typeof createdSync==='undefined'?true:!createdSync;
                this.emit('created', args, function () {

                    if (template) {
                        util.createComp(_this, template);
                    }

                }, isAsync);
            }

            // 向文档插入实例
            connectedCallback(...args) {
                this.emit('attached', args);
            }
            // 从文档中移除实例
            disconnectedCallback(...args) {
                this.emit('detached', args);
            }
            // 从旧文档移到新文档中
            adoptedCallback(...args){//oldDocument, newDocument
                this.emit('adopted', args);
            }
            // 添加，移除，或修改一个属性
            attributeChangedCallback(...args) {//attrName, oldVal, newVal
                this.emit('attributeChanged', args);
            }
        };
    }



    return function (anestor) {
        const IElement = createElement(anestor.extendElement || HTMLElement);
        class XElement extends IElement {
            get $anestor() {
                return util.getAnestor(anestor, this);
            }

            static get observedAttributes() { return anestor.observedAttributes || []; }
        }

        return XElement;
    };

});
</script>